/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package calculationapp1;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author Rofhiwa Ramuhala
 */
public class frmWhatIHaveLearnt extends javax.swing.JFrame {

    /**
     * Creates new form frmWhatIHaveLearnt
     */
    public frmWhatIHaveLearnt() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnReturn = new javax.swing.JButton();
        rbAddition = new javax.swing.JRadioButton();
        rbSubtraction = new javax.swing.JRadioButton();
        rbMultiplication = new javax.swing.JRadioButton();
        rbDivision = new javax.swing.JRadioButton();
        rbAbsolute = new javax.swing.JRadioButton();
        rbSquareRoot = new javax.swing.JRadioButton();
        rbStringLength = new javax.swing.JRadioButton();
        rbStringCompare = new javax.swing.JRadioButton();
        rbDateTime = new javax.swing.JRadioButton();
        btnCalculate = new javax.swing.JButton();
        txtValue1 = new javax.swing.JTextField();
        txtValue2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        rbAddition.setText("Addition ");
        rbAddition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAdditionActionPerformed(evt);
            }
        });

        rbSubtraction.setText("Subtraction");
        rbSubtraction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSubtractionActionPerformed(evt);
            }
        });

        rbMultiplication.setText("Multiplication");
        rbMultiplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMultiplicationActionPerformed(evt);
            }
        });

        rbDivision.setText("Division");
        rbDivision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDivisionActionPerformed(evt);
            }
        });

        rbAbsolute.setText("Absolute");
        rbAbsolute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAbsoluteActionPerformed(evt);
            }
        });

        rbSquareRoot.setText("Square Root");
        rbSquareRoot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSquareRootActionPerformed(evt);
            }
        });

        rbStringLength.setText("String Length");
        rbStringLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbStringLengthActionPerformed(evt);
            }
        });

        rbStringCompare.setText("String Compare");
        rbStringCompare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbStringCompareActionPerformed(evt);
            }
        });

        rbDateTime.setText("Date Time");
        rbDateTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDateTimeActionPerformed(evt);
            }
        });

        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnReturn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rbStringCompare, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbStringLength, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbSquareRoot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbAbsolute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbDivision, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbMultiplication, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbSubtraction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbDateTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbAddition, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtValue1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(txtValue2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnCalculate)
                .addGap(114, 114, 114))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnReturn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbAddition)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbSubtraction)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbMultiplication)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbDivision)
                    .addComponent(txtValue1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtValue2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbAbsolute)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbSquareRoot)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rbStringLength)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbStringCompare)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbDateTime)
                .addGap(17, 17, 17)
                .addComponent(btnCalculate)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        frmMain frmMain=new frmMain();
        frmMain.show();
        this.hide();
    }//GEN-LAST:event_btnReturnActionPerformed

    private void rbDivisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDivisionActionPerformed
        rbAddition.setSelected(false);
        rbSubtraction.setSelected(false);
        rbMultiplication.setSelected(false);
        rbDivision.setSelected(true);
        rbAbsolute.setSelected(false);
        rbSquareRoot.setSelected(false);
        rbStringLength.setSelected(false);
        rbStringCompare.setSelected(false);
        rbDateTime.setSelected(false);
    }//GEN-LAST:event_rbDivisionActionPerformed

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        if(rbAddition.isSelected())
        {
            int intInput1;
            int intInput2;
            intInput1=Integer.parseInt(txtValue1.getText());
            intInput2=Integer.parseInt(txtValue2.getText());
            Addition(intInput1,intInput2);
        }
        else if(rbSubtraction.isSelected())
        {
            int intInput1;
            int intInput2;
            intInput1=Integer.parseInt(txtValue1.getText());
            intInput2=Integer.parseInt(txtValue2.getText());
            Subtraction(intInput1,intInput2);  
        }
        else if(rbMultiplication.isSelected())
        {
            int intInput1;
            int intInput2;
            intInput1=Integer.parseInt(txtValue1.getText());
            intInput2=Integer.parseInt(txtValue2.getText());
            Multiplication(intInput1,intInput2); 
        }
        else if(rbDivision.isSelected())
        {
            int intInput1;
            int intInput2;
            intInput1=Integer.parseInt(txtValue1.getText());
            intInput2=Integer.parseInt(txtValue2.getText());
            Division(intInput1,intInput2);   
        }
        else if(rbAbsolute.isSelected())
        {
            int intInput1;
            intInput1=Integer.parseInt(txtValue1.getText());
            Absolute(intInput1);
        }
        else if(rbSquareRoot.isSelected())
        {
            int intInput1;
            intInput1=Integer.parseInt(txtValue1.getText());
            SquareRoot(intInput1);
        }
        else if(rbStringLength.isSelected())
        {
           String strInput;
           strInput=txtValue1.getText();
           StringLength(strInput);
        }
        else if(rbStringCompare.isSelected())
        {
            String strInput1;
            String strInput2;
            strInput1=txtValue1.getText();
            strInput2=txtValue2.getText();
            StringCompare(strInput1,strInput2);
        }
        else if(rbDateTime.isSelected())
        {
            DateTime();
        }
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void rbAdditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAdditionActionPerformed
        rbAddition.setSelected(true);
        rbSubtraction.setSelected(false);
        rbMultiplication.setSelected(false);
        rbDivision.setSelected(false);
        rbAbsolute.setSelected(false);
        rbSquareRoot.setSelected(false);
        rbStringLength.setSelected(false);
        rbStringCompare.setSelected(false);
        rbDateTime.setSelected(false);
    }//GEN-LAST:event_rbAdditionActionPerformed

    private void rbSubtractionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSubtractionActionPerformed
        rbAddition.setSelected(false);
        rbSubtraction.setSelected(true);
        rbMultiplication.setSelected(false);
        rbDivision.setSelected(false);
        rbAbsolute.setSelected(false);
        rbSquareRoot.setSelected(false);
        rbStringLength.setSelected(false);
        rbStringCompare.setSelected(false);
        rbDateTime.setSelected(false);
    }//GEN-LAST:event_rbSubtractionActionPerformed

    private void rbMultiplicationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMultiplicationActionPerformed
        rbAddition.setSelected(false);
        rbSubtraction.setSelected(false);
        rbMultiplication.setSelected(true);
        rbDivision.setSelected(false);
        rbAbsolute.setSelected(false);
        rbSquareRoot.setSelected(false);
        rbStringLength.setSelected(false);
        rbStringCompare.setSelected(false);
        rbDateTime.setSelected(false);
    }//GEN-LAST:event_rbMultiplicationActionPerformed

    private void rbAbsoluteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAbsoluteActionPerformed
        rbAddition.setSelected(false);
        rbSubtraction.setSelected(false);
        rbMultiplication.setSelected(false);
        rbDivision.setSelected(false);
        rbAbsolute.setSelected(true);
        rbSquareRoot.setSelected(false);
        rbStringLength.setSelected(false);
        rbStringCompare.setSelected(false);
        rbDateTime.setSelected(false);

    }//GEN-LAST:event_rbAbsoluteActionPerformed

    private void rbSquareRootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSquareRootActionPerformed
        rbAddition.setSelected(false);
        rbSubtraction.setSelected(false);
        rbMultiplication.setSelected(false);
        rbDivision.setSelected(false);
        rbAbsolute.setSelected(false);
        rbSquareRoot.setSelected(true);
        rbStringLength.setSelected(false);
        rbStringCompare.setSelected(false);
        rbDateTime.setSelected(false);
    }//GEN-LAST:event_rbSquareRootActionPerformed

    private void rbStringLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbStringLengthActionPerformed
        rbAddition.setSelected(false);
        rbSubtraction.setSelected(false);
        rbMultiplication.setSelected(false);
        rbDivision.setSelected(false);
        rbAbsolute.setSelected(false);
        rbSquareRoot.setSelected(false);
        rbStringLength.setSelected(true);
        rbStringCompare.setSelected(false);
        rbDateTime.setSelected(false);
  
    }//GEN-LAST:event_rbStringLengthActionPerformed

    private void rbStringCompareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbStringCompareActionPerformed
        rbAddition.setSelected(false);
        rbSubtraction.setSelected(false);
        rbMultiplication.setSelected(false);
        rbDivision.setSelected(false);
        rbAbsolute.setSelected(false);
        rbSquareRoot.setSelected(false);
        rbStringLength.setSelected(false);
        rbStringCompare.setSelected(true);
        rbDateTime.setSelected(false);
    }//GEN-LAST:event_rbStringCompareActionPerformed

    private void rbDateTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDateTimeActionPerformed
        rbAddition.setSelected(false);
        rbSubtraction.setSelected(false);
        rbMultiplication.setSelected(false);
        rbDivision.setSelected(false);
        rbAbsolute.setSelected(false);
        rbSquareRoot.setSelected(false);
        rbStringLength.setSelected(false);
        rbStringCompare.setSelected(false);
        rbDateTime.setSelected(true);
    }//GEN-LAST:event_rbDateTimeActionPerformed

     private void Addition(int intValue1,int intValue2)
    {
       int intOutput;
       intOutput=intValue1+intValue2;
       JOptionPane.showMessageDialog(null,intOutput);
    }
     
      private void Subtraction(int intValue1,int intValue2)
    {
       int intOutput;
       intOutput=intValue1-intValue2;
       JOptionPane.showMessageDialog(null,intOutput);
    }
      
       private void Multiplication(int intValue1,int intValue2)
    {
       int intOutput;
       intOutput=intValue1*intValue2;
       JOptionPane.showMessageDialog(null,intOutput);
    }
       
       private void Division(int intValue1,int intValue2)
    {
       int intOutput;
       intOutput=intValue1/intValue2;
       JOptionPane.showMessageDialog(null,intOutput);
    }
       
       private void Absolute(int intValue1)
       {
           int intOutput;
           intOutput=Math.abs(intValue1);
           JOptionPane.showMessageDialog(null,intOutput);
       }
       
       private void SquareRoot(double dblValue1)
       {
           double dblOutput;
           dblOutput=Math.sqrt(dblValue1);
           JOptionPane.showMessageDialog(null,dblOutput);
       }
       
       private void StringLength(String strValue1)
       {
           int intValue1;
           intValue1=strValue1.length();
           JOptionPane.showMessageDialog(null,"This value has"+""+intValue1+""+"characters from the word"+strValue1);
       }
       
       private void StringCompare(String strValue1,String strValue2)
       {
           int intResult;
           String strResult;
           strResult="";
           intResult=strValue1.compareTo(strValue2);
           if(intResult==-32)
           {
               strResult="Values don't match";
           }
           else if(intResult==32)
           {
               strResult="Values don't match";
           }
           else if(intResult==0)
           {
               strResult="values Macth";
           }
           JOptionPane.showMessageDialog(null,strResult);
       }
       
    private void DateTime()
    {
     Date dtDate=new Date();
     String strDateTime;
     strDateTime=dtDate.toString();
     JOptionPane.showMessageDialog(null,strDateTime);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmWhatIHaveLearnt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmWhatIHaveLearnt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmWhatIHaveLearnt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmWhatIHaveLearnt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmWhatIHaveLearnt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnReturn;
    private javax.swing.JRadioButton rbAbsolute;
    private javax.swing.JRadioButton rbAddition;
    private javax.swing.JRadioButton rbDateTime;
    private javax.swing.JRadioButton rbDivision;
    private javax.swing.JRadioButton rbMultiplication;
    private javax.swing.JRadioButton rbSquareRoot;
    private javax.swing.JRadioButton rbStringCompare;
    private javax.swing.JRadioButton rbStringLength;
    private javax.swing.JRadioButton rbSubtraction;
    private javax.swing.JTextField txtValue1;
    private javax.swing.JTextField txtValue2;
    // End of variables declaration//GEN-END:variables
}
